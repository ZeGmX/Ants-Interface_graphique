//
// Generated by JTB 1.3.2
//

package ant.parser.visitor;
import ant.parser.syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * nodeOptional -> ( Eol() )?
    * nodeListOptional -> ( Block() )*
    * nodeToken -> <EOF>
    */
   public R visit(Program n, A argu);

   /**
    * ident -> Ident()
    * nodeToken -> ":"
    * eol -> Eol()
    * nodeListOptional -> ( Instr() )*
    */
   public R visit(Block n, A argu);

   /**
    * nodeChoice -> ( Sense() | Mark() | Unmark() | PickUp() | Drop() | Goto() | Turn() | Move() | Flip() )
    */
   public R visit(Instr n, A argu);

   /**
    * nodeToken -> "Sense"
    * sensedir -> Sensedir()
    * ident -> Ident()
    * ident1 -> Ident()
    * cond -> Cond()
    * eol -> Eol()
    */
   public R visit(Sense n, A argu);

   /**
    * nodeToken -> "Mark"
    * litInt -> LitInt()
    * eol -> Eol()
    */
   public R visit(Mark n, A argu);

   /**
    * nodeToken -> "Unmark"
    * litInt -> LitInt()
    * eol -> Eol()
    */
   public R visit(Unmark n, A argu);

   /**
    * nodeToken -> "PickUp"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(PickUp n, A argu);

   /**
    * nodeToken -> "Drop"
    * eol -> Eol()
    */
   public R visit(Drop n, A argu);

   /**
    * nodeToken -> "Turn"
    * direction -> Direction()
    * eol -> Eol()
    */
   public R visit(Turn n, A argu);

   /**
    * nodeToken -> "Move"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(Move n, A argu);

   /**
    * nodeToken -> "Flip"
    * litInt -> LitInt()
    * ident -> Ident()
    * ident1 -> Ident()
    * eol -> Eol()
    */
   public R visit(Flip n, A argu);

   /**
    * nodeToken -> "Goto"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(Goto n, A argu);

   /**
    * nodeChoice -> ( Left() | Right() )
    */
   public R visit(Direction n, A argu);

   /**
    * nodeToken -> "Left"
    */
   public R visit(Left n, A argu);

   /**
    * nodeToken -> "Right"
    */
   public R visit(Right n, A argu);

   /**
    * nodeChoice -> ( Friend() | Foe() | FriendWithFood() | FoeWithFood() | Food() | Rock() | Marker() | FoeMarker() | Home() | FoeHome() )
    */
   public R visit(Cond n, A argu);

   /**
    * nodeToken -> "Friend"
    */
   public R visit(Friend n, A argu);

   /**
    * nodeToken -> "Foe"
    */
   public R visit(Foe n, A argu);

   /**
    * nodeToken -> "FriendWithFood"
    */
   public R visit(FriendWithFood n, A argu);

   /**
    * nodeToken -> "FoeWithFood"
    */
   public R visit(FoeWithFood n, A argu);

   /**
    * nodeToken -> "Food"
    */
   public R visit(Food n, A argu);

   /**
    * nodeToken -> "Rock"
    */
   public R visit(Rock n, A argu);

   /**
    * nodeToken -> "Marker"
    * litInt -> LitInt()
    */
   public R visit(Marker n, A argu);

   /**
    * nodeToken -> "FoeMarker"
    */
   public R visit(FoeMarker n, A argu);

   /**
    * nodeToken -> "Home"
    */
   public R visit(Home n, A argu);

   /**
    * nodeToken -> "FoeHome"
    */
   public R visit(FoeHome n, A argu);

   /**
    * nodeChoice -> ( Here() | Ahead() | LeftAhead() | RightAhead() )
    */
   public R visit(Sensedir n, A argu);

   /**
    * nodeToken -> "Here"
    */
   public R visit(Here n, A argu);

   /**
    * nodeToken -> "Ahead"
    */
   public R visit(Ahead n, A argu);

   /**
    * nodeToken -> "LeftAhead"
    */
   public R visit(LeftAhead n, A argu);

   /**
    * nodeToken -> "RightAhead"
    */
   public R visit(RightAhead n, A argu);

   /**
    * nodeToken -> <PlainIdent>
    */
   public R visit(Ident n, A argu);

   /**
    * nodeChoice -> ( <Digits> | <NegDigits> )
    */
   public R visit(LitInt n, A argu);

   /**
    * nodeList -> ( <Eol> )+
    */
   public R visit(Eol n, A argu);

}
