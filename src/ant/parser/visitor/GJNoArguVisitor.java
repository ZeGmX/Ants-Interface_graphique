//
// Generated by JTB 1.3.2
//

package ant.parser.visitor;
import ant.parser.syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors with no argument must implement this interface.
 */

public interface GJNoArguVisitor<R> {

   //
   // GJ Auto class visitors with no argument
   //

   public R visit(NodeList n);
   public R visit(NodeListOptional n);
   public R visit(NodeOptional n);
   public R visit(NodeSequence n);
   public R visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * nodeOptional -> ( Eol() )?
    * nodeListOptional -> ( Block() )*
    * nodeToken -> <EOF>
    */
   public R visit(Program n);

   /**
    * ident -> Ident()
    * nodeToken -> ":"
    * eol -> Eol()
    * nodeListOptional -> ( Instr() )*
    */
   public R visit(Block n);

   /**
    * nodeChoice -> ( Sense() | Mark() | Unmark() | PickUp() | Drop() | Goto() | Turn() | Move() | Flip() )
    */
   public R visit(Instr n);

   /**
    * nodeToken -> "Sense"
    * sensedir -> Sensedir()
    * ident -> Ident()
    * ident1 -> Ident()
    * cond -> Cond()
    * eol -> Eol()
    */
   public R visit(Sense n);

   /**
    * nodeToken -> "Mark"
    * litInt -> LitInt()
    * eol -> Eol()
    */
   public R visit(Mark n);

   /**
    * nodeToken -> "Unmark"
    * litInt -> LitInt()
    * eol -> Eol()
    */
   public R visit(Unmark n);

   /**
    * nodeToken -> "PickUp"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(PickUp n);

   /**
    * nodeToken -> "Drop"
    * eol -> Eol()
    */
   public R visit(Drop n);

   /**
    * nodeToken -> "Turn"
    * direction -> Direction()
    * eol -> Eol()
    */
   public R visit(Turn n);

   /**
    * nodeToken -> "Move"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(Move n);

   /**
    * nodeToken -> "Flip"
    * litInt -> LitInt()
    * ident -> Ident()
    * ident1 -> Ident()
    * eol -> Eol()
    */
   public R visit(Flip n);

   /**
    * nodeToken -> "Goto"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(Goto n);

   /**
    * nodeChoice -> ( Left() | Right() )
    */
   public R visit(Direction n);

   /**
    * nodeToken -> "Left"
    */
   public R visit(Left n);

   /**
    * nodeToken -> "Right"
    */
   public R visit(Right n);

   /**
    * nodeChoice -> ( Friend() | Foe() | FriendWithFood() | FoeWithFood() | Food() | Rock() | Marker() | FoeMarker() | Home() | FoeHome() )
    */
   public R visit(Cond n);

   /**
    * nodeToken -> "Friend"
    */
   public R visit(Friend n);

   /**
    * nodeToken -> "Foe"
    */
   public R visit(Foe n);

   /**
    * nodeToken -> "FriendWithFood"
    */
   public R visit(FriendWithFood n);

   /**
    * nodeToken -> "FoeWithFood"
    */
   public R visit(FoeWithFood n);

   /**
    * nodeToken -> "Food"
    */
   public R visit(Food n);

   /**
    * nodeToken -> "Rock"
    */
   public R visit(Rock n);

   /**
    * nodeToken -> "Marker"
    * litInt -> LitInt()
    */
   public R visit(Marker n);

   /**
    * nodeToken -> "FoeMarker"
    */
   public R visit(FoeMarker n);

   /**
    * nodeToken -> "Home"
    */
   public R visit(Home n);

   /**
    * nodeToken -> "FoeHome"
    */
   public R visit(FoeHome n);

   /**
    * nodeChoice -> ( Here() | Ahead() | LeftAhead() | RightAhead() )
    */
   public R visit(Sensedir n);

   /**
    * nodeToken -> "Here"
    */
   public R visit(Here n);

   /**
    * nodeToken -> "Ahead"
    */
   public R visit(Ahead n);

   /**
    * nodeToken -> "LeftAhead"
    */
   public R visit(LeftAhead n);

   /**
    * nodeToken -> "RightAhead"
    */
   public R visit(RightAhead n);

   /**
    * nodeToken -> <PlainIdent>
    */
   public R visit(Ident n);

   /**
    * nodeChoice -> ( <Digits> | <NegDigits> )
    */
   public R visit(LitInt n);

   /**
    * nodeList -> ( <Eol> )+
    */
   public R visit(Eol n);

}

