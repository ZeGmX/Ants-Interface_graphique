//
// Generated by JTB 1.3.2
//

package ant.parser.visitor;
import ant.parser.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * nodeOptional -> ( Eol() )?
    * nodeListOptional -> ( Block() )*
    * nodeToken -> <EOF>
    */
   public R visit(Program n) {
      R _ret=null;
      n.nodeOptional.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * ident -> Ident()
    * nodeToken -> ":"
    * eol -> Eol()
    * nodeListOptional -> ( Instr() )*
    */
   public R visit(Block n) {
      R _ret=null;
      n.ident.accept(this);
      n.nodeToken.accept(this);
      n.eol.accept(this);
      n.nodeListOptional.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> ( Sense() | Mark() | Unmark() | PickUp() | Drop() | Goto() | Turn() | Move() | Flip() )
    */
   public R visit(Instr n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Sense"
    * sensedir -> Sensedir()
    * ident -> Ident()
    * ident1 -> Ident()
    * cond -> Cond()
    * eol -> Eol()
    */
   public R visit(Sense n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.sensedir.accept(this);
      n.ident.accept(this);
      n.ident1.accept(this);
      n.cond.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Mark"
    * litInt -> LitInt()
    * eol -> Eol()
    */
   public R visit(Mark n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.litInt.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Unmark"
    * litInt -> LitInt()
    * eol -> Eol()
    */
   public R visit(Unmark n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.litInt.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "PickUp"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(PickUp n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.ident.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Drop"
    * eol -> Eol()
    */
   public R visit(Drop n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Turn"
    * direction -> Direction()
    * eol -> Eol()
    */
   public R visit(Turn n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.direction.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Move"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(Move n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.ident.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Flip"
    * litInt -> LitInt()
    * ident -> Ident()
    * ident1 -> Ident()
    * eol -> Eol()
    */
   public R visit(Flip n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.litInt.accept(this);
      n.ident.accept(this);
      n.ident1.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Goto"
    * ident -> Ident()
    * eol -> Eol()
    */
   public R visit(Goto n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.ident.accept(this);
      n.eol.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> ( Left() | Right() )
    */
   public R visit(Direction n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Left"
    */
   public R visit(Left n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Right"
    */
   public R visit(Right n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> ( Friend() | Foe() | FriendWithFood() | FoeWithFood() | Food() | Rock() | Marker() | FoeMarker() | Home() | FoeHome() )
    */
   public R visit(Cond n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Friend"
    */
   public R visit(Friend n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Foe"
    */
   public R visit(Foe n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "FriendWithFood"
    */
   public R visit(FriendWithFood n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "FoeWithFood"
    */
   public R visit(FoeWithFood n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Food"
    */
   public R visit(Food n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Rock"
    */
   public R visit(Rock n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Marker"
    * litInt -> LitInt()
    */
   public R visit(Marker n) {
      R _ret=null;
      n.nodeToken.accept(this);
      n.litInt.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "FoeMarker"
    */
   public R visit(FoeMarker n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Home"
    */
   public R visit(Home n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "FoeHome"
    */
   public R visit(FoeHome n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> ( Here() | Ahead() | LeftAhead() | RightAhead() )
    */
   public R visit(Sensedir n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Here"
    */
   public R visit(Here n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "Ahead"
    */
   public R visit(Ahead n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "LeftAhead"
    */
   public R visit(LeftAhead n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> "RightAhead"
    */
   public R visit(RightAhead n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeToken -> <PlainIdent>
    */
   public R visit(Ident n) {
      R _ret=null;
      n.nodeToken.accept(this);
      return _ret;
   }

   /**
    * nodeChoice -> ( <Digits> | <NegDigits> )
    */
   public R visit(LitInt n) {
      R _ret=null;
      n.nodeChoice.accept(this);
      return _ret;
   }

   /**
    * nodeList -> ( <Eol> )+
    */
   public R visit(Eol n) {
      R _ret=null;
      n.nodeList.accept(this);
      return _ret;
   }

}
