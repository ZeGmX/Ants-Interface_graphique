/* AntParser.java */
/* Generated By:JavaCC: Do not edit this line. AntParser.java */
package ant.parser.parser;

import ant.parser.syntaxtree.*;
import java.util.Vector;


public class AntParser implements AntParserConstants {

  static final public Program Program() throws ParseException {NodeOptional n0 = new NodeOptional();
   Eol n1;
   NodeListOptional n2 = new NodeListOptional();
   Block n3;
   NodeToken n4;
   Token n5;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Eol:{
      n1 = Eol();
n0.addNode(n1);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PlainIdent:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      n3 = Block();
n2.addNode(n3);
    }
n2.nodes.trimToSize();
    n5 = jj_consume_token(0);
n5.beginColumn++; n5.endColumn++;
      n4 = JTBToolkit.makeNodeToken(n5);
{if ("" != null) return new Program(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Block Block() throws ParseException {Ident n0;
   NodeToken n1;
   Token n2;
   Eol n3;
   NodeListOptional n4 = new NodeListOptional();
   Instr n5;
    n0 = Ident();
    n2 = jj_consume_token(TWOPOINTS);
n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Eol();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MOVE:
      case MARK:
      case TURN:
      case DROP:
      case FLIP:
      case SENSE:
      case GOTO:
      case UNMARK:
      case PICKUP:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n5 = Instr();
n4.addNode(n5);
    }
n4.nodes.trimToSize();
{if ("" != null) return new Block(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public Instr Instr() throws ParseException {NodeChoice n0;
   Sense n1;
   Mark n2;
   Unmark n3;
   PickUp n4;
   Drop n5;
   Goto n6;
   Turn n7;
   Move n8;
   Flip n9;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SENSE:{
      n1 = Sense();
n0 = new NodeChoice(n1, 0);
      break;
      }
    case MARK:{
      n2 = Mark();
n0 = new NodeChoice(n2, 1);
      break;
      }
    case UNMARK:{
      n3 = Unmark();
n0 = new NodeChoice(n3, 2);
      break;
      }
    case PICKUP:{
      n4 = PickUp();
n0 = new NodeChoice(n4, 3);
      break;
      }
    case DROP:{
      n5 = Drop();
n0 = new NodeChoice(n5, 4);
      break;
      }
    case GOTO:{
      n6 = Goto();
n0 = new NodeChoice(n6, 5);
      break;
      }
    case TURN:{
      n7 = Turn();
n0 = new NodeChoice(n7, 6);
      break;
      }
    case MOVE:{
      n8 = Move();
n0 = new NodeChoice(n8, 7);
      break;
      }
    case FLIP:{
      n9 = Flip();
n0 = new NodeChoice(n9, 8);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Instr(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Sense Sense() throws ParseException {NodeToken n0;
   Token n1;
   Sensedir n2;
   Ident n3;
   Ident n4;
   Cond n5;
   Eol n6;
    n1 = jj_consume_token(SENSE);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Sensedir();
    n3 = Ident();
    n4 = Ident();
    n5 = Cond();
    n6 = Eol();
{if ("" != null) return new Sense(n0,n2,n3,n4,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Mark Mark() throws ParseException {NodeToken n0;
   Token n1;
   LitInt n2;
   Eol n3;
    n1 = jj_consume_token(MARK);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = LitInt();
    n3 = Eol();
{if ("" != null) return new Mark(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Unmark Unmark() throws ParseException {NodeToken n0;
   Token n1;
   LitInt n2;
   Eol n3;
    n1 = jj_consume_token(UNMARK);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = LitInt();
    n3 = Eol();
{if ("" != null) return new Unmark(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public PickUp PickUp() throws ParseException {NodeToken n0;
   Token n1;
   Ident n2;
   Eol n3;
    n1 = jj_consume_token(PICKUP);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Ident();
    n3 = Eol();
{if ("" != null) return new PickUp(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Drop Drop() throws ParseException {NodeToken n0;
   Token n1;
   Eol n2;
    n1 = jj_consume_token(DROP);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Eol();
{if ("" != null) return new Drop(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Turn Turn() throws ParseException {NodeToken n0;
   Token n1;
   Direction n2;
   Eol n3;
    n1 = jj_consume_token(TURN);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Direction();
    n3 = Eol();
{if ("" != null) return new Turn(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Move Move() throws ParseException {NodeToken n0;
   Token n1;
   Ident n2;
   Eol n3;
    n1 = jj_consume_token(MOVE);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Ident();
    n3 = Eol();
{if ("" != null) return new Move(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Flip Flip() throws ParseException {NodeToken n0;
   Token n1;
   LitInt n2;
   Ident n3;
   Ident n4;
   Eol n5;
    n1 = jj_consume_token(FLIP);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = LitInt();
    n3 = Ident();
    n4 = Ident();
    n5 = Eol();
{if ("" != null) return new Flip(n0,n2,n3,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public Goto Goto() throws ParseException {NodeToken n0;
   Token n1;
   Ident n2;
   Eol n3;
    n1 = jj_consume_token(GOTO);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Ident();
    n3 = Eol();
{if ("" != null) return new Goto(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public Direction Direction() throws ParseException {NodeChoice n0;
   Left n1;
   Right n2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      n1 = Left();
n0 = new NodeChoice(n1, 0);
      break;
      }
    case RIGHT:{
      n2 = Right();
n0 = new NodeChoice(n2, 1);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Direction(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Left Left() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(LEFT);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Left(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Right Right() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(RIGHT);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Right(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Cond Cond() throws ParseException {NodeChoice n0;
   Friend n1;
   Foe n2;
   FriendWithFood n3;
   FoeWithFood n4;
   Food n5;
   Rock n6;
   Marker n7;
   FoeMarker n8;
   Home n9;
   FoeHome n10;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FRIEND:{
      n1 = Friend();
n0 = new NodeChoice(n1, 0);
      break;
      }
    case FOE:{
      n2 = Foe();
n0 = new NodeChoice(n2, 1);
      break;
      }
    case FRIENDWITHFOOD:{
      n3 = FriendWithFood();
n0 = new NodeChoice(n3, 2);
      break;
      }
    case FOEWITHFOOD:{
      n4 = FoeWithFood();
n0 = new NodeChoice(n4, 3);
      break;
      }
    case FOOD:{
      n5 = Food();
n0 = new NodeChoice(n5, 4);
      break;
      }
    case ROCK:{
      n6 = Rock();
n0 = new NodeChoice(n6, 5);
      break;
      }
    case MARKER:{
      n7 = Marker();
n0 = new NodeChoice(n7, 6);
      break;
      }
    case FOEMARKER:{
      n8 = FoeMarker();
n0 = new NodeChoice(n8, 7);
      break;
      }
    case HOME:{
      n9 = Home();
n0 = new NodeChoice(n9, 8);
      break;
      }
    case FOEHOME:{
      n10 = FoeHome();
n0 = new NodeChoice(n10, 9);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Cond(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Friend Friend() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FRIEND);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Friend(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Foe Foe() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FOE);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Foe(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FriendWithFood FriendWithFood() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FRIENDWITHFOOD);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new FriendWithFood(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FoeWithFood FoeWithFood() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FOEWITHFOOD);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new FoeWithFood(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Food Food() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FOOD);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Food(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Rock Rock() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(ROCK);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Rock(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Marker Marker() throws ParseException {NodeToken n0;
   Token n1;
   LitInt n2;
    n1 = jj_consume_token(MARKER);
n0 = JTBToolkit.makeNodeToken(n1);
    n2 = LitInt();
{if ("" != null) return new Marker(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public FoeMarker FoeMarker() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FOEMARKER);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new FoeMarker(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Home Home() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(HOME);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Home(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FoeHome FoeHome() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(FOEHOME);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new FoeHome(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Sensedir Sensedir() throws ParseException {NodeChoice n0;
   Here n1;
   Ahead n2;
   LeftAhead n3;
   RightAhead n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HERE:{
      n1 = Here();
n0 = new NodeChoice(n1, 0);
      break;
      }
    case AHEAD:{
      n2 = Ahead();
n0 = new NodeChoice(n2, 1);
      break;
      }
    case LEFTAHEAD:{
      n3 = LeftAhead();
n0 = new NodeChoice(n3, 2);
      break;
      }
    case RIGHTAHEAD:{
      n4 = RightAhead();
n0 = new NodeChoice(n4, 3);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Sensedir(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Here Here() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(HERE);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Here(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Ahead Ahead() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(AHEAD);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Ahead(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LeftAhead LeftAhead() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(LEFTAHEAD);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new LeftAhead(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RightAhead RightAhead() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(RIGHTAHEAD);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new RightAhead(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Ident Ident() throws ParseException {NodeToken n0;
   Token n1;
    n1 = jj_consume_token(PlainIdent);
n0 = JTBToolkit.makeNodeToken(n1);
{if ("" != null) return new Ident(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LitInt LitInt() throws ParseException {NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Digits:{
      n2 = jj_consume_token(Digits);
n1 = JTBToolkit.makeNodeToken(n2);
n0 = new NodeChoice(n1, 0);
      break;
      }
    case NegDigits:{
      n4 = jj_consume_token(NegDigits);
n3 = JTBToolkit.makeNodeToken(n4);
n0 = new NodeChoice(n3, 1);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new LitInt(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Eol Eol() throws ParseException {NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
    label_3:
    while (true) {
      n2 = jj_consume_token(Eol);
n1 = JTBToolkit.makeNodeToken(n2);
n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Eol:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
    }
n0.nodes.trimToSize();
{if ("" != null) return new Eol(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AntParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x0,0x4ba40000,0x4ba40000,0x30000000,0x804b0000,0x4100000,0x60,0x200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x200,0x3,0x3,0x0,0x1cc,0x30,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public AntParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AntParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AntParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AntParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AntParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AntParser(AntParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AntParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
