/* AntParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AntParserTokenManager.java */
package ant.parser.parser;
import ant.parser.syntaxtree.*;
import java.util.Vector;

/** Token Manager. */
@SuppressWarnings("unused")public class AntParserTokenManager implements AntParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffffff0000L) != 0L)
         {
            jjmatchedKind = 41;
            return 9;
         }
         return -1;
      case 1:
         if ((active0 & 0x1ffffff0000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
            return 9;
         }
         return -1;
      case 2:
         if ((active0 & 0x137fffe0000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 2;
            }
            return 9;
         }
         if ((active0 & 0xc800010000L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0x1eb9c000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 3;
            }
            return 9;
         }
         if ((active0 & 0x1463fe0000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x1df80000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 4;
            }
            return 9;
         }
         if ((active0 & 0x201c000000L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0xf800000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 41;
               jjmatchedPos = 5;
            }
            return 9;
         }
         if ((active0 & 0x10780000000L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x1f000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0x1f000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 7;
            return 9;
         }
         return -1;
      case 8:
         if ((active0 & 0x1a000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x5000000000L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 9;
            return 9;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 9;
         return -1;
      case 10:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 10;
            return 9;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 9;
         return -1;
      case 11:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 11;
            return 9;
         }
         return -1;
      case 12:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 12;
            return 9;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 10);
      case 58:
         return jjStopAtPos(0, 15);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x1c882030000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x180000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x1020000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x400240000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2010400000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1028100000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2210000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc8404f0000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10081000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x200400000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc804000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10082000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100080000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400b00000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x104000000L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 9);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 9);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 9);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x10080000000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x2010000000L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 9);
         break;
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 9);
         break;
      case 112:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 9);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 9);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 9);
         break;
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10080000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 9);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 112:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 9);
         break;
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 87:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0xa000000000L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 9);
         break;
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 40, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAdd(2); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 9)
                        kind = 9;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 13)
                     { jjCheckNAddTwoStates(5, 6); }
                  else if (curChar == 45)
                     { jjCheckNAdd(4); }
                  else if (curChar == 59)
                  {
                     if (kind > 3)
                        kind = 3;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAdd(2); }
                  break;
               case 3:
                  if (curChar == 45)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if (curChar == 13)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar != 10)
                     break;
                  kind = 9;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 7:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 9:
                  if ((0x3ff400800000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(9); }
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3000L) != 0L)
         {
            jjmatchedKind = 14;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 11);
      case 92:
         return jjMoveStringLiteralDfa1_1(0x3000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 92:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00000000L & l) != 0L)
                     kind = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     kind = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   5, 6, 7, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\72", "\106\157\145", "\106\157\157\144", "\115\157\166\145", 
"\110\157\155\145", "\110\145\162\145", "\115\141\162\153", "\122\157\143\153", 
"\124\165\162\156", "\104\162\157\160", "\106\154\151\160", "\101\150\145\141\144", 
"\123\145\156\163\145", "\122\151\147\150\164", "\114\145\146\164", "\107\157\164\157", 
"\106\162\151\145\156\144", "\125\156\155\141\162\153", "\120\151\143\153\125\160", 
"\115\141\162\153\145\162", "\106\157\145\110\157\155\145", "\114\145\146\164\101\150\145\141\144", 
"\122\151\147\150\164\101\150\145\141\144", "\106\157\145\115\141\162\153\145\162", 
"\106\157\145\127\151\164\150\106\157\157\144", "\106\162\151\145\156\144\127\151\164\150\106\157\157\144", null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 42)
         {
            jjmatchedKind = 42;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 42)
         {
            jjmatchedKind = 42;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AntParserTokenManager(JavaCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public AntParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 10; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WITHIN_STRING",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7ffffff8a61L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
static final long[] jjtoMore = {
   0x7400L, 
};
    static protected JavaCharStream  input_stream;

    static private final int[] jjrounds = new int[10];
    static private final int[] jjstateSet = new int[2 * 10];

    
    static protected char curChar;
}
